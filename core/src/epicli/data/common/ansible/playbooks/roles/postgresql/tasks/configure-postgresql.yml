---

- name: Check if /var/log/postgresql directory exists
  stat:
    path: /var/log/postgresql
  register: var_log_postgresql

- name: Create directory /var/log/postgresql
  # the same permissions as for PG installed on RHEL from Software Collections (on Ubuntu are different)
  file:
    path: /var/log/postgresql
    state: directory
    owner: postgres
    group: postgres
    mode: 0700
  when:
    - not var_log_postgresql.stat.exists

- name: Initialize database # RedHat specific block
  block:
    - name: Check initialization status (RedHat)
      stat:
        path: "{{ pg_config_dir[ansible_os_family] }}/pg_hba.conf"
      register: pg_hba_conf_stat

    - name: Initialize database (RedHat)
      command: /usr/pgsql-10/bin/postgresql-10-setup initdb {{ pg_service_name[ansible_os_family] }}
      when:
        - not pg_hba_conf_stat.stat.exists
  when:
    - ansible_os_family == 'RedHat'

- name: Enable postgresql service
  systemd:
    name: "{{ pg_service_name[ansible_os_family] }}"
    enabled: yes

- name: Change pg_hba.conf
  replace:
    path: "{{ pg_config_dir[ansible_os_family] }}/pg_hba.conf"
    regexp: '^host\s+all\s+all\s+127\.0\.0\.1/32\s+(?:ident|md5)$'
    replace: 'host    all             all             0.0.0.0/0               md5'
    backup: yes
  register: change_pg_hba_conf

# Set runtime_shared_preload_libraries fact that is used in postgresql-epiphany.conf.j2
- name: Get shared_preload_libraries when postgresql service is running
  block:
    - name: Check if postgresql service is running
      command: systemctl status postgresql
      register: postgresql_status
      changed_when: false
      failed_when: postgresql_status.rc not in [0, 3, 4]

    - name: Get PostgreSQL settings
      become: yes
      become_user: postgres
      postgresql_info:
        filter: settings
      register: postgresql_info
      when:
        - postgresql_status.rc == 0 # running

    - name: Set runtime_shared_preload_libraries fact
      set_fact:
        runtime_shared_preload_libraries: "{{ postgresql_info.settings.shared_preload_libraries.setting }}"
      when:
        - postgresql_info.settings is defined

- name: Create Epiphany managed configuration sub-file
  template:
    src: postgresql-epiphany.conf.j2
    dest: "{{ pg_config_dir[ansible_os_family] }}/postgresql-epiphany.conf"
    owner: postgres
    group: postgres
    mode: 0600
  register: change_postgresql_epiphany_conf

- name: Change postgresql.conf
  lineinfile:
    path: "{{ pg_config_dir[ansible_os_family] }}/postgresql.conf"
    line: "include = 'postgresql-epiphany.conf'	# Epiphany managed configuration that overrides above settings"
    insertafter: '^#include ' # insert line after the last 'include' to override all settings
    firstmatch: no
    backup: yes
  register: change_postgresql_conf

- name: Restart postgresql service
  systemd:
    name: "{{ pg_service_name[ansible_os_family] }}"
    state: restarted
  when: change_pg_hba_conf
     or change_postgresql_epiphany_conf
     or change_postgresql_conf

- name: Configure logrotate
  block:
    - name: Remove logrotate configuration provided by 'postgresql-common' package
      file:
        path: /etc/logrotate.d/postgresql-common
        state: absent
      when: ansible_os_family == 'Debian'
    - name: Create logrotate configuration file
      template:
        src: logrotate.conf.j2
        dest: /etc/logrotate.d/postgresql
        owner: root
        group: root
        mode: 0644
  when:
    - specification.logrotate.config is defined

- name: Set up replication
  include_tasks: replication-{{ ansible_os_family }}.yml
  when: 
    - specification.extensions.replication.enabled is defined
    - specification.extensions.replication.enabled
    - specification.extensions.replication.use_repmgr is defined
    - not specification.extensions.replication.use_repmgr

- name: Set up replication with repmgr
  include_tasks: replication-repmgr-{{ ansible_os_family }}.yml
  when: 
    - specification.extensions.replication.enabled is defined
    - specification.extensions.replication.enabled
    - specification.extensions.replication.use_repmgr is defined
    - specification.extensions.replication.use_repmgr

- name: Include PgBouncer configuration tasks
  include_tasks: additional-components/configure-pgbouncer.yml
  when:
    - specification.extensions.pgbouncer.enabled is defined
    - specification.extensions.pgbouncer.enabled
    - groups['postgresql'][0] == inventory_hostname

- name: Set up Pgpool if enabled
  block:
    - name: Include vars from applications role
      include_vars:
        file: roles/applications/vars/main.yml
        name: applications_role_config
      when:
        - "'applications' in roles_with_generated_vars"

    - name: Get Pgpool configuration
      set_fact:
        pgpool: "{{ pgpool_config[0] | default({}) }}"
      vars:
        pgpool_config: >-
          {{ applications_role_config.specification.applications | default([])
                                                                 | selectattr("name", "equalto", "pgpool") | selectattr('enabled')
                                                                 | map(attribute='pgpool') | list }}

    - name: Include Pgpool setup tasks
      include_tasks: additional-components/pgpool.yml
      when:
        - pgpool.env is defined
        - groups['postgresql'][0] == inventory_hostname
