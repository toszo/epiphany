---
- name: Add ignite group
  become: yes
  group:
    name: ignite
    state: present

- name: Add ignite user
  become: yes
  user:
    name: ignite
    group: ignite

- name: Install Java package
  package:
    name: "{{ package_name[ansible_os_family] }}"
    state: present
  vars:
    package_name:
      Debian: openjdk-8-jre-headless
      RedHat: java-1.8.0-openjdk-headless

- name: Get path to set JAVA_HOME variable
  shell: "which java | xargs readlink -f | xargs dirname | xargs dirname"
  register: java_home_location
  changed_when: false

- name: Set JAVA_HOME environment variable for all users
  lineinfile:
    path: /etc/environment
    state: present
    regexp: '^JAVA_HOME='
    line: JAVA_HOME="{{ java_home_location.stdout }}"

- name: Check if Ignite in current version exists
  stat:
    path: /opt/ignite # symlink
    get_attributes: no
    get_checksum: no
    get_mime: no
  register: ignite_dir_stat

- name: Install Ignite binaries
  when: ignite_dir_stat.stat.lnk_source is not defined
     or ignite_dir_stat.stat.lnk_source != ignite_dest_path
  block:
    - name: Download Ignite binaries
      include_role:
        name: download
        tasks_from: download_file
      vars:
        file_name: "{{ ignite_file_name }}"

    - name: Create temp directory
      file:
        path: /tmp/ignite_{{ specification.version }}
        state: directory
        owner: ignite
        group: ignite

    - name: Uncompress {{ ignite_file_name }} to temp directory
      unarchive:
        remote_src: yes
        src: "{{ download_directory }}/{{ ignite_file_name }}"
        dest: /tmp/ignite_{{ specification.version }}
        owner: ignite
        group: ignite
        list_files: yes
      register: archive_contents

    - name: Create {{ ignite_dest_path }} directory
      file:
        path: "{{ ignite_dest_path }}"
        state: directory
        owner: ignite
        group: ignite

    - name: Copy Ignite files from tmp location
      copy:
        remote_src: yes
        src: "/tmp/ignite_{{ specification.version }}/{{ archive_contents.files[0].split('/')[0] }}/"
        dest: "{{ ignite_dest_path }}"

    - name: Link /opt/ignite to the right version
      file:
        src: "{{ ignite_dest_path }}"
        dest: /opt/ignite
        state: link
      register: link_ignite_version

  vars:
    ignite_file_name: "{{ specification.file_name }}"
    ignite_dest_path: /opt/ignite_{{ specification.version }}

- name: Reserve ports from ephemeral range
  when: link_ignite_version.changed
  block:
    - name: Get net.ipv4.ip_local_reserved_ports
      command: cat /proc/sys/net/ipv4/ip_local_reserved_ports
      register: ip_local_reserved_ports
      changed_when: false

    - name: Reserve ports from ephemeral range
      sysctl:
        name: net.ipv4.ip_local_reserved_ports
        value: "{{ (reserved_ports + ignite_ports_from_ephemeral_range) | sort | unique | join(',') }}"
        sysctl_set: yes
        state: present
        reload: yes
      vars:
        reserved_ports: "{{ ip_local_reserved_ports.stdout.split(',') | reject('equalto', '') | list }}"

- name: Append block to /opt/ignite/bin/include/functions.sh
  blockinfile:
    path: /opt/ignite/bin/include/functions.sh
    marker: "# {mark} ANSIBLE MANAGED BLOCK"
    insertafter: EOF
    backup: yes
    block: "{{ block_to_append_to_ignite_functions_script }}"
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx

- name: Copy Ignite enabled plugins
  copy:
    remote_src: yes
    src: "/opt/ignite/libs/optional/{{ item }}"
    dest: /opt/ignite/libs
  loop: "{{ specification.enabled_plugins }}"
  register: plugins_installed

- name: Set Ignite IP discovery list
  set_fact:
    ip_discovery_list: "{{ lookup('template', 'ip-discovery.xml.j2') }}"

- name: Prepare Ignite configuration
  set_fact:
    ignite_configuration: "{{ specification.config | replace('IP_LIST_PLACEHOLDER',ip_discovery_list) }}"

- name: Create Ignite config file
  template:
    dest: /opt/ignite/config/default-config.xml
    owner: ignite
    group: ignite
    mode: 0644
    src: default-config.xml.j2
  register: ignite_configuration_created

- name: Create systemd service
  template:
    dest: /etc/systemd/system/ignite.service
    owner: ignite
    group: ignite
    mode: 0644
    src: ignite.service.j2
  register: ignite_systemd_service_created

- name: Start ignite
  become: yes
  systemd:
    name: ignite
    enabled: yes
    state: started
    daemon_reload: "{{ ignite_systemd_service_created.changed }}"

- name: Restart Ignite service
  become: yes
  systemd:
    name: ignite
    state: restarted
  when: plugins_installed.changed or ignite_configuration_created.changed
