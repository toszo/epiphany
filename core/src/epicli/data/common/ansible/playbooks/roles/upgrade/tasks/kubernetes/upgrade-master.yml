---
- name: upgrade-master | Wait for cluster's readiness
  include_tasks: wait.yml

- name: upgrade-master | Check if /etc/kubeadm/kubeadm-config.yml exists
  stat:
    path: /etc/kubeadm/kubeadm-config.yml
  changed_when: false
  register: kubeadm_config_file

- name: Check if etcd encryption configuration exists
  stat:
    path: /etc/kubernetes/pki/etcd/etc-encryption.conf
  register: etcd_encryption_file

- name: Set imageRepository in kubeadm-config ConfigMap to use {{ image_registry_address }}
  block:
    - name: upgrade-master | Set parent key of imageRepository key in kubeadm-config ConfigMap
      set_fact:
        kubeadm_config_parent_key: >-
          {{ 'MasterConfiguration' if 'v1.11' in cluster_version.stdout else 'ClusterConfiguration' }}

    - name: upgrade-master | Get value of imageRepository key
      environment:
        KUBECONFIG: /home/{{ admin_user.name }}/.kube/config
      shell: kubectl get cm -n kube-system kubeadm-config -o jsonpath='{.data.{{ kubeadm_config_parent_key }}}'
      changed_when: false
      register: result

    - name: upgrade-master | Save value of imageRepository as fact
      set_fact:
        kubeadm_image_repository: "{{ (result.stdout|from_yaml).imageRepository }}"

    - name: upgrade-master | Patch imageRepository in kubeadm-config ConfigMap
      environment:
        KUBECONFIG: /home/{{ admin_user.name }}/.kube/config
      shell: |-
        set -o pipefail &&
        # do not use --export option since it has been deprecated in 1.14
        kubectl get cm kubeadm-config -n kube-system -o yaml |
        sed 's/imageRepository: {{ kubeadm_image_repository }}/imageRepository: {{ image_registry_address }}\/{{ kubeadm_image_repository }}/g' |
        xargs --null -I config_map_content \
        kubectl patch cm kubeadm-config -n kube-system --patch config_map_content
      args:
        executable: /bin/bash
      when:
        - not image_registry_address in kubeadm_image_repository
  when:
    - not kubeadm_config_file.stat.exists

- name: upgrade-master | Reconfigure coredns
  include_tasks: reconfigure-coredns.yml
  when:
    - version is version('1.16.7', '<=') 

- name: upgrade-master | Reconfigure rabbitmq application
  include_tasks: reconfigure-rabbitmq-app.yml

- name: upgrade-master | Reconfigure keycloak application
  include_tasks: reconfigure-auth-service-app.yml

- name: upgrade-master | Upgrade kubernetes-dashboard
  include_tasks: upgrade-kubernetes-dashboard.yml

- name: upgrade-master | Drain master in preparation for maintenance
  environment:
    KUBECONFIG: /home/{{ admin_user.name }}/.kube/config
  shell: kubectl drain {{ inventory_hostname }} --ignore-daemonsets --delete-local-data
  when:
    - groups['kubernetes_node'] is defined
    - groups['kubernetes_node']|length > 0 # drain master only if there is at least one worker node

- name: upgrade-master | Wait for cluster's readiness
  include_tasks: wait.yml

# For Redhat and Debian & K8n > 1.12.10 we want to update master like so
- name: upgrade-master | Upgrade, configure packages
  block:
  - name: upgrade-master | Hold packages for Debian family
    include_tasks: "Debian/hold-packages.yml"
    when: ansible_os_family == "Debian"

  - name: upgrade-master | Install kubeadm
    include_tasks: "{{ ansible_os_family }}/install-kubeadm.yml"

  - name: upgrade-master | Upgrade network components for Kubernetes >= v1.16.x
    include_tasks: upgrade-network-components.yml
    when:
      - version is version('1.16.7', '>=') 

  - name: upgrade-master | Upgrade coredns for latest Kubernetes (1.17.4)
    include_tasks: upgrade-coredns.yml
    when:
      - version is version('1.17.4', '==') 

  - name: upgrade-master | Wait for cluster's readiness
    include_tasks: wait.yml

  - name: upgrade-master | Migrate kubeadm config
    include_tasks: migrate-kubeadm-config.yml
    when:
      - kubeadm_config_file.stat.exists
      - version is version('1.17.4', '==') # Migrate kubeadm config for K8s 1.17

  - name: upgrade-master | Upgrade plan block
    block:
      - name: "upgrade-master | Validate whether cluster is upgradeable
              {{ '(using kubeadm-config.yml file)' if kubeadm_config_file.stat.exists else '' }}"
        shell: >-
          kubeadm upgrade plan v{{ version +
          (' --config /etc/kubeadm/kubeadm-config.yml' if kubeadm_config_file.stat.exists else '') }}
        changed_when: false
        register: result
        until: result is succeeded
        retries: 20
        delay: 30
    rescue: # ignore CoreDNSUnsupportedPlugins error since coredns migration does not support all plugins that are valid and currently used
      - name: "upgrade-master | Validate whether cluster is upgradeable with ignore CoreDNS plugin related erroros
              {{ '(using kubeadm-config.yml file)' if kubeadm_config_file.stat.exists else '' }}"
        shell: >-
          kubeadm upgrade plan v{{ version +
          (' --config /etc/kubeadm/kubeadm-config.yml' if kubeadm_config_file.stat.exists else '') }} --ignore-preflight-errors=CoreDNSUnsupportedPlugins
        changed_when: false
        register: result
        until: result is succeeded
        retries: 20
        delay: 30

  - name: upgrade-master | Upgrade apply block
    block:
      - name: "upgrade-master | Upgrade K8s cluster to v{{ version }}
              {{ '(using kubeadm-config.yml file)' if kubeadm_config_file.stat.exists else '' }}"
        shell: >-
          kubeadm upgrade apply -y v{{ version +
          (' --config /etc/kubeadm/kubeadm-config.yml' if kubeadm_config_file.stat.exists else '') }}
        register: result
        until: result is succeeded
        retries: 20
        delay: 30
        when:
          - cluster_version.stdout is version('v' + version, '<') # without this condition fails when 'upgrading' again from 1.12.10 to 1.12.10
    rescue:  # ignore CoreDNSUnsupportedPlugins error since coredns migration does not support all plugins that are valid and currently used
      - name: "upgrade-master | Upgrade K8s cluster to v{{ version }}
              {{ '(using kubeadm-config.yml file)' if kubeadm_config_file.stat.exists else '' }}"
        shell: >-
          kubeadm upgrade apply -y v{{ version +
          (' --config /etc/kubeadm/kubeadm-config.yml' if kubeadm_config_file.stat.exists else '') }} --ignore-preflight-errors=CoreDNSUnsupportedPlugins
        register: result
        until: result is succeeded
        retries: 20
        delay: 30
        when:
          - cluster_version.stdout is version('v' + version, '<') 

  - name: Install kubelet, kubectl and kubernetes-cni for {{ version }}
    include_tasks: "{{ ansible_os_family }}/install-packages.yml"
    when: result is succeeded

  - name: Update kubeadm-config.yml if exists
    include_tasks: upgrade-kubeadm-config.yml
    when: kubeadm_config_file.stat.exists 

  - name: upgrade-master | Set etcd encryption if configured
    include_tasks: etcd-encryption.yml
    when:
      - groups['kubernetes_master'][0] == inventory_hostname
      - etcd_encryption_file.stat.exists
  when: version is version('1.13.0', '>=') or
        ansible_os_family == "RedHat"

# For Debian & K8n <= 1.12.10 we want to update package like so
- name: upgrade-master | Upgrade, configure packages
  block:
  - name: upgrade-master | Install packages
    include_tasks: "{{ ansible_os_family }}/install-packages-pre-1.13.yml"

  - name: upgrade-master | Wait for cluster's readiness
    include_tasks: wait.yml

  - name: "upgrade-master | Validate whether cluster is upgradeable
          {{ '(using kubeadm-config.yml file)' if kubeadm_config_file.stat.exists else '' }}"
    shell: >-
      kubeadm upgrade plan v{{ version +
      (' --config /etc/kubeadm/kubeadm-config.yml' if kubeadm_config_file.stat.exists else '') }}
    changed_when: false
    register: result
    until: result is succeeded
    retries: 5
    delay: 5

  - name: "upgrade-master | Upgrade K8s cluster to v{{ version }}
          {{ '(using kubeadm-config.yml file)' if kubeadm_config_file.stat.exists else '' }}"
    shell: >-
      kubeadm upgrade apply -y v{{ version +
      (' --config /etc/kubeadm/kubeadm-config.yml' if kubeadm_config_file.stat.exists else '') }}
    register: result
    until: result is succeeded
    retries: 5
    delay: 5
    when:
      - cluster_version.stdout is version('v' + version, '<') # without this condition fails when 'upgrading' again from 1.12.10 to 1.12.10
  when: version is version('1.12.10', '==') and
        ansible_os_family == "Debian"

- name: upgrade-master | Wait for cluster's readiness
  include_tasks: wait.yml

- name: Upgrade Docker
  block:
    - name: upgrade-master | Upgrade Docker # this may restart Docker daemon
      include_tasks: docker.yml
  when:
    - version is version('1.14.0', '>=') # Docker 18.09 validated since K8s 1.14

- name: upgrade-master | Stop Kubelet
  systemd:
    state: stopped
    name: kubelet

- name: upgrade-master | Stop Docker
  systemd:
    state: stopped
    name: docker

- name: upgrade-master | Reload daemon
  systemd:
    daemon_reload: yes

- name: upgrade-master | Start Docker
  systemd:
    name: docker
    state: started
    enabled: yes
    
- name: upgrade-master | Start Kubelet
  systemd:
    name: kubelet
    state: started
    enabled: yes

- name: upgrade-master | Wait for cluster's readiness
  include_tasks: wait.yml

- name: upgrade-master | Uncordon master - mark master as schedulable
  environment:
    KUBECONFIG: /home/{{ admin_user.name }}/.kube/config
  shell: kubectl uncordon {{ inventory_hostname }}
  register: output
  until: output is succeeded
  retries: 20
  delay: 5
  when:
    - groups['kubernetes_node'] is defined
    - groups['kubernetes_node']|length > 0 # master is drained only if there is at least one worker node

- name: upgrade-master | Verify cluster version
  include_tasks: verify-upgrade.yml
