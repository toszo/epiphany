---
# Master:

- name: Add replication user to postgresql
  become_user: postgres
  postgresql_user:
    user: "{{ specification.extensions.replication.replication_user_name }}"
    password: "{{ specification.extensions.replication.replication_user_password }}"
    role_attr_flags: LOGIN,REPLICATION
  when:
    - groups['postgresql'][0] == inventory_hostname

- name: Check if replication user exists in pg_hba.conf
  shell: grep "^host\s*replication\s*{{ specification.extensions.replication.replication_user_name }}\s*{{ hostvars[groups['postgresql'][1]]['ansible_default_ipv4']['address'] }}/32\s*md5" "{{ pg_config_dir[ansible_os_family] }}/pg_hba.conf"
  register: test_replication 
  failed_when: "test_replication.rc == 2"
  when:
    - groups['postgresql'][0] == inventory_hostname

- name: Add replication user to pg_hba.conf
  lineinfile:
    path: "{{ pg_config_dir[ansible_os_family] }}/pg_hba.conf"
    line: "host    replication     {{ specification.extensions.replication.replication_user_name }}     {{ hostvars[groups['postgresql'][1]]['ansible_default_ipv4']['address'] }}/32              md5"
    backup: yes
  when:
    - groups['postgresql'][0] == inventory_hostname
    - test_replication.stdout == ""

- name: Restart postgresql service
  service:
    name: "{{ pg_service_name[ansible_os_family] }}"
    state: restarted
  when:
    - groups['postgresql'][0] == inventory_hostname

# Slave:

- name: Stop postgresql service
  service:
    name: "{{ pg_service_name[ansible_os_family] }}"
    state: stopped
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Turn on hot_standby
  replace:
    path: "{{ pg_config_dir[ansible_os_family] }}/postgresql.conf"
    regexp: "^#hot_standby = on"
    replace: "hot_standby = on"
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Create pgpass file
  template:
    src: pgpass.j2
    dest: /var/lib/pgsql/.pgpass
    owner: postgres
    group: postgres
    mode: 0600
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Backup remote config files
  copy:
    src: "{{ pg_config_dir[ansible_os_family] }}/{{ item }}"
    dest: /tmp/
    remote_src: yes
  with_items:
    - "pg_hba.conf"
    - "postgresql.conf"
    - "postgresql-epiphany.conf"
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Clean data directory
  shell: "rm -rf {{ pg_data_dir[ansible_os_family] }}/*"
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Replicate content with pg_basebackup
  become_user: postgres
  shell: "pg_basebackup -h {{ hostvars[groups['postgresql'][0]]['ansible_default_ipv4']['address'] }} -D {{ pg_data_dir[ansible_os_family] }}/ -P -U {{ specification.extensions.replication.replication_user_name }} --wal-method=stream"
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Restore remote config files
  copy:
    src: "/tmp/{{ item }}"
    dest: "{{ pg_config_dir[ansible_os_family] }}/"
    remote_src: yes
  with_items:
    - "pg_hba.conf"
    - "postgresql.conf"
    - "postgresql-epiphany.conf"
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Create recovery.conf file
  template:
    src: recovery.conf.j2
    dest: "{{ pg_data_dir[ansible_os_family] }}/recovery.conf"
    owner: postgres
    group: postgres
  when:
    - groups['postgresql'][1] == inventory_hostname

- name: Start postgresql service
  service:
    name: "{{ pg_service_name[ansible_os_family] }}"
    state: started
  when:
    - groups['postgresql'][1] == inventory_hostname
